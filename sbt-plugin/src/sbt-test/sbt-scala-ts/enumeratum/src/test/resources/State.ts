// Generated by ScalaTS 0.7.2-SNAPSHOT: https://scala-ts.github.io/scala-ts/

declare var exports: any;

export const nsState = exports;

import * as nsAlabama from './Alabama';
import * as nsAlaska from './Alaska';

export const dependencyModules = [
  nsAlabama,
  nsAlaska,
];

export type StateUnion = nsAlabama.Alabama | nsAlaska.Alaska;

export const StateUnion = {
  "AL": nsAlabama.AlabamaInhabitant, 
  "AK": nsAlaska.AlaskaInhabitant
} as const;

export function isStateUnion(v: any): v is StateUnion {
  return (
    nsAlabama.isAlabama(v) ||
    nsAlaska.isAlaska(v)
  );
}

export const StateSingletonInhabitant = 'StateSingleton';

export type StateSingleton = typeof StateSingletonInhabitant;

export function isStateSingleton(v: any): v is StateSingleton {
  return StateSingletonInhabitant == v;
}

class StateSingletonValuesClass {
  public readonly Alabama: nsAlabama.AlabamaSingleton = nsAlabama.AlabamaInhabitant;
  public readonly Alaska: nsAlaska.AlaskaSingleton = nsAlaska.AlaskaInhabitant;
  public readonly cities: Readonly<Map<State, ReadonlySet<string>>> = (() => { const __buf1360151735: Map<State, ReadonlySet<string>> = new Map(); __buf1360151735.set(this.Alaska, new Set([ "Juneau", "Anchorage" ])); __buf1360151735.set(this.Alabama, new Set([ "Birmingham" ])); return __buf1360151735 })();
}

export const StateSingletonValues = new StateSingletonValuesClass();

export const StateInhabitant = StateSingletonInhabitant;

export type State = StateUnion;

export function isState(v: any): v is State {
  return (
    isStateUnion(v)
  );
}