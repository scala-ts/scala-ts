// Generated by ScalaTS 0.5.20-SNAPSHOT: https://scala-ts.github.io/scala-ts/
import * as idtlt from 'idonttrustlikethat';
export const _externalDependencyModules = [idtlt];

declare var exports: any;

export const nsFeature = exports;

import * as nsBarNum from './BarNum';
import * as nsFooLure from './FooLure';

export const dependencyModules = [
  nsBarNum,
  nsFooLure,
];

// Validator for UnionDeclaration Feature
export const idtltFeature = idtlt.union(
  nsBarNum.idtltDiscriminatedBarNum,
  nsFooLure.idtltDiscriminatedFooLure);

// Deriving TypeScript type from Feature validator
export type Feature = typeof idtltFeature.T;

export const idtltDiscriminatedFeature = idtlt.intersection(
  idtltFeature,
  idtlt.object({
    _type: idtlt.literal('Feature')
  })
);

// Deriving TypeScript type from idtltDiscriminatedFeature validator
export type DiscriminatedFeature = typeof idtltDiscriminatedFeature.T;

export const FeatureValues = {
  BarNum: nsBarNum.BarNumInhabitant, 
  FooLure: nsFooLure.FooLureInhabitant
} as const;

export type FeatureValuesKey = keyof typeof FeatureValues;

export function mapFeatureValues<T>(f: (_k: FeatureValuesKey) => T): Readonly<Record<FeatureValuesKey, T>> {
  return {
    BarNum: f(nsBarNum.BarNumInhabitant), 
    FooLure: f(nsFooLure.FooLureInhabitant)
  }
}

export const FeatureTypes = {
  BarNum: nsBarNum.BarNumInhabitant, 
  FooLure: nsFooLure.FooLureInhabitant
} as const;

export const Feature = {
  ...FeatureValues,
  ...FeatureTypes
} as const;

export const idtltFeatureKnownValues: ReadonlySet<Feature> = new Set<Feature>(Object.values(Feature) as ReadonlyArray<Feature>);

export function isFeature(v: any): v is Feature {
  return (
    nsBarNum.isBarNum(v) ||
    nsFooLure.isFooLure(v)
  );
}
