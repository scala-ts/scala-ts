package io.github.scalats.sbt.python

import sbt._
import sbt.Keys._

import _root_.io.github.scalats.python.{
  PythonDeclarationMapper,
  PythonFilePrinter,
  PythonSingletonImportResolver,
  PythonTypeMapper
}
import _root_.io.github.scalats.sbt.TypeScriptGeneratorPlugin

object PythonPlugin extends AutoPlugin {
  override def requires = TypeScriptGeneratorPlugin
  override def trigger = noTrigger

  object autoImport {}

  import TypeScriptGeneratorPlugin.autoImport._
  import Manifest.version

  override lazy val projectSettings: Seq[Def.Setting[_]] =
    scalatsAddScalatsDependency(
      Manifest.groupId %% "scala-ts-python" % Manifest.version
    ) ++ Seq(
      scalatsPrinter := scalatsPrinterForClass[PythonFilePrinter](),
      scalatsTypescriptIndent := "    ",
      scalatsTypescriptLineSeparator := "",
      scalatsPrinterPrelude := scalatsPrinterInMemoryPrelude(
        s"# Generated by ScalaTS ${version}: https://scala-ts.github.io/scala-ts/"
      ),
      scalatsTypeScriptImportResolvers += scalatsUnionWithLiteralSingletonImportResolvers,
      scalatsTypeScriptTypeMappers := Seq(
        // Custom type mapper
        classOf[PythonTypeMapper]
      ),
      scalatsTypeScriptDeclarationMappers := Seq(
        // Custom declaration mapper (before type mapper)
        classOf[PythonDeclarationMapper]
      ),
      scalatsAdditionalClasspath ++= {
        classOf[PythonDeclarationMapper].getClassLoader match {
          case cls: java.net.URLClassLoader =>
            cls.getURLs.toSeq.flatMap { url =>
              val repr = url.toString

              if (
                repr.indexOf("sbt-scala-ts-python") != -1 &&
                repr.startsWith("file:")
              ) {
                Seq(new File(url.toURI))
              } else {
                Seq.empty[File]
              }
            }

          case _ =>
            Seq.empty[File]
        }
      }
    )
}
