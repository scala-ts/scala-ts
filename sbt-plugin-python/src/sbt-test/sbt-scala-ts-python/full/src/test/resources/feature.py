# Generated by ScalaTS 0.7.0-SNAPSHOT: https://scala-ts.github.io/scala-ts/

from dataclasses import dataclass  # noqa: F401
import typing  # noqa: F401
import datetime  # noqa: F401
import time  # noqa: F401

from generated import barnum  # noqa: F401
from generated.barnum import BarNum
from generated import foolure  # noqa: F401
from generated.foolure import FooLure


# Declare composite type Feature

# Declare union FeatureUnion
FeatureUnion = typing.Union[BarNum, FooLure]


class FeatureUnionCompanion:
    @classmethod
    def BarNum(self) -> FeatureUnion:
        return barnum.BarNumInhabitant

    @classmethod
    def FooLure(self) -> FeatureUnion:
        return foolure.FooLureInhabitant


FeatureUnionKnownValues: typing.List[FeatureUnion] = [
    FeatureUnionCompanion.BarNum(),
    FeatureUnionCompanion.FooLure(),
]


# Declare singleton FeatureSingleton
class FeatureSingletonInvariantsFactory:
    @classmethod
    def FooLure(self) -> FooLure:
        return foolure.FooLureInhabitant

    @classmethod
    def BarNum(self) -> BarNum:
        return barnum.BarNumInhabitant


@dataclass
class IFeatureSingletonInvariants:
    FooLure: FooLure
    BarNum: BarNum


FeatureSingletonInvariants = IFeatureSingletonInvariants(
    FooLure=FeatureSingletonInvariantsFactory.FooLure(),
    BarNum=FeatureSingletonInvariantsFactory.BarNum(),
)

Feature = FeatureUnion
FeatureCompanion = FeatureUnionCompanion
FeatureKnownValues: typing.List[Feature] = FeatureUnionKnownValues
