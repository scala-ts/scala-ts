# Generated by ScalaTS 0.7.0-SNAPSHOT: https://scala-ts.github.io/scala-ts/

from dataclasses import dataclass  # noqa: F401
import typing  # noqa: F401
import datetime  # noqa: F401
import time  # noqa: F401

from generated import alabama  # noqa: F401
from generated.alabama import Alabama
from generated import alaska  # noqa: F401
from generated.alaska import Alaska


# Declare composite type State

# Declare union StateUnion
StateUnion = typing.Union[Alabama, Alaska]


class StateUnionCompanion:
    @classmethod
    def Alabama(self) -> StateUnion:
        return alabama.AlabamaInhabitant

    @classmethod
    def Alaska(self) -> StateUnion:
        return alaska.AlaskaInhabitant


StateUnionKnownValues: typing.List[StateUnion] = [
    StateUnionCompanion.Alabama(),
    StateUnionCompanion.Alaska(),
]


# Declare singleton StateSingleton
class StateSingletonInvariantsFactory:
    @classmethod
    def Alabama(self) -> Alabama:
        return alabama.AlabamaInhabitant

    @classmethod
    def Alaska(self) -> Alaska:
        return alaska.AlaskaInhabitant


@dataclass
class IStateSingletonInvariants:
    Alabama: Alabama
    Alaska: Alaska


StateSingletonInvariants = IStateSingletonInvariants(
    Alabama=StateSingletonInvariantsFactory.Alabama(),
    Alaska=StateSingletonInvariantsFactory.Alaska(),
)

State = StateUnion
StateCompanion = StateUnionCompanion
StateKnownValues: typing.List[State] = StateUnionKnownValues
